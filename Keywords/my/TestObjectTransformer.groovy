package my

import com.kms.katalon.core.annotation.Keyword
import com.kms.katalon.core.logging.KeywordLogger
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.TestObject
import com.kms.katalon.core.testobject.SelectorMethod
import com.kms.katalon.core.util.KeywordUtil

/**
 * 
 * @author kazurayam
 *
 */
class TestObjectTransformer {

	private static KeywordLogger logger = KeywordUtil.logInfo()

	/**
	 * This accepts a test object with xpath in the format of
	 *     <code>//button[@id="staticId1:dynamicId:staticId2"]/span</code>
	 * 
	 * then it transform the expression into another expression of
	 *     <code>//button[starts-with(@id,"staticId1") and (substring(@id,string-length(@id)-string-length("staticId2")+1)="staticId2")]/span<code>
	 * 
	 * then it generates a TestObject instance with the XPath generated above, 
	 * 
	 * finally it returns the new TestObject
	 * 
	 * @param testObject a TestObject with XPath in the above mentioned format, which was generated by WebRecorder possibly
	 * @returns new TestObject
	 */
	@Keyword
	static TestObject toMyFavoritesXPath(TestObject testObject, FailureHandling flowControl) {
		String xpath = ''
		try {
			return transformTestObject(testObject, {})
		} catch (Exception e) {
			stepFailed("failed to transform xpath: ${xpath}", flowControl)
		}
	}

	/**
	 *
	 * @param source TestObject instance as source
	 * @param logic a Groovy Closure which transforms input xpath expression into another xpath expression
	 */
	private static TestObject transformTestObject(TestObject source, Closure logic) {
		if (source.getSelectorMethod() == SelectorMethod.XPATH) {
			
		} else if (source.getSelectorMethod() == SelectorMethod.BASIC) {
		
		} else if (source.getSelectorMethod() == SelectorMethod.CSS) {
			throw new UnsupportedOperationException("SelectionMethod.CSS is not yet supported")
		} else {
			throw new RuntimeException("unknow selectionMethod")
		}
		//TestObject newTestObject = new TestObject()
		//newTestObject.setSelectorMethod(SelectorMethod.BASIC)
		return source
	}

	static def stepFailed(String message, FailureHandling flowControl) {
		if (flowControl == FailureHandling.OPTIONAL) {
			println "#stepFailed('${message}',FailureHandling.OPTIONAL)"
			logger.logWarning(message)
		} else if (flowControl == FailureHandling.CONTINUE_ON_FAILURE) {
			println "#stepFailed('${message}',FailureHandling.CONTINUE_ON_FAILURE)"
			logger.logFailed(message)
			KeywordUtil.markFailed(message)
		} else {
			// in the case where flowControl == FailureHandling.STOP_ON_FAILURE
			println "#stepFailed('${message}',FailureHandling.STOP_ON_FAILURE)"
			logger.logFailed(message)
			KeywordUtil.markFailedAndStop(message)
		}
	}
}